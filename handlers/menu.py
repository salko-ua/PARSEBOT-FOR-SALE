from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
from control_db import Database
from aiogram.filters.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from keyboards.premium import back
from keyboards.menu import hide_kb, continue_premium

router = Router()


class SendFAQ(StatesGroup):
    send_message = State()


@router.message(F.text == "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è üßæ")
async def information(message: Message):
    await message.answer(
        r"""<b><a href = "https://telegra.ph/Pol%D1%96tika-konf%D1%96denc%D1%96jnost%D1%96-12-20">–ü–æ–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ</a></b>""",
        parse_mode="HTMl",
        disable_web_page_preview=True,
    )
    await message.answer(
        r"""<b><a href = "https://telegra.ph/DOGOV%D0%86R-OFERTI-12-20">–î–æ–≥–æ–≤—ñ—Ä –û—Ñ–µ—Ä—Ç–∏</a></b>""",
        parse_mode="HTMl",
        disable_web_page_preview=True,
    )


@router.message(F.text == "–ü—ñ–¥–ø–∏—Å–∫–∞ üëë")
async def premium(message: Message):
    await message.delete()
    db = await Database.setup()
    telegram_id = message.from_user.id

    if not await db.telegram_id_premium_exists(telegram_id):
        await message.answer(
            text=(
                f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∞—à—É –ø—ñ–¥–ø–∏—Å–∫—É üëë\n"
                f"–ü—ñ–¥–ø–∏—Å–∫–∞: –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚ùå\n"
                f"–ö—É–ø—É–≤–∞–≤ –ø—ñ–¥–ø–∏—Å–∫—É: 0 —Ä–∞–∑"
            ),
            reply_markup=hide_kb(),
        )
        return

    is_premium = await db.is_premium_user(telegram_id)
    expiration_date = await db.get_expiration_date(telegram_id)
    bought_premium = await db.get_bought_premium(telegram_id)
    date_purchase = await db.get_date_purchase(telegram_id)

    if is_premium:
        text = (
            f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∞—à—É –ø—ñ–¥–ø–∏—Å–∫—É üëë\n"
            f"–ü—ñ–¥–ø–∏—Å–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ\n"
            f"–ö—É–ø—É–≤–∞–≤ –ø—ñ–¥–ø–∏—Å–∫—É: {bought_premium} —Ä–∞–∑\n\n"
            f"–î—ñ—è –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–æ: <b>{date_purchase}-{expiration_date}</b>"
        )
    elif not is_premium:
        text = (
            f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∞—à—É –ø—ñ–¥–ø–∏—Å–∫—É üëë\n"
            f"–ü—ñ–¥–ø–∏—Å–∫–∞: –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚ùå\n"
            f"–ö—É–ø—É–≤–∞–≤ –ø—ñ–¥–ø–∏—Å–∫—É: {bought_premium} —Ä–∞–∑\n\n"
            f"–ó–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å: <b>{expiration_date}</b>"
        )

    await message.answer(text, parse_mode="HTML", reply_markup=continue_premium())


@router.message(F.text == "–ü–æ—Å–∏–ª–∞–Ω–Ω—è üîó")
async def faq(message: Message):
    await message.delete()
    db = await Database.setup()

    if not await db.is_premium_user(message.from_user.id):
        await message.answer("–ü—Ä–∏–¥–±–∞–π—Ç–µ –ø—ñ–¥–ø–∏—Å–∫—É, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è üòï")
        return

    urls = await db.see_urls(message.from_user.id)
    if len(urls) > 0:
        text = "–û—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ—Å–∏–ª–∞–Ω—å: \n"
        s = 1
        for url in urls:
            text += f"{s}. {url[0]}\n"
            s += 1
    else:
        text = "–í–∏ –Ω–µ –∑–ø–∞—Ä—Å–∏–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ üòê"

    await message.answer(text, disable_web_page_preview=True, reply_markup=hide_kb())


@router.message(F.text == "FAQ üë§")
async def information(message: Message, state: FSMContext):
    await message.delete()
    db = await Database.setup()

    if not await db.is_premium_user(message.from_user.id):
        await message.answer(
            "–©–æ–± –Ω–∞–ø–∏—Å–∞—Ç–∏ –∞–¥–º—ñ–Ω—É —É –≤–∞—Å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ ü•π"
        )
        return

    message = await message.answer(
        "–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∏–∂—á–µ –ø–∏—Ç–∞–Ω–Ω—è, —ñ –≤–æ–Ω–æ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –¥–æ –∞–¥–º—ñ–Ω–∞", reply_markup=back()
    )
    await state.set_state(SendFAQ.send_message)
    await state.update_data(message=message)


@router.callback_query(F.data == "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ ‚ùå", SendFAQ.send_message)
async def faq_back(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await query.message.delete()


@router.message(SendFAQ.send_message)
async def faq_back(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    messages: Message = data["message"]

    await state.clear()
    text_from_user = (
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id}\n"
        "–ù–∞–¥—ñ—Å–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: \n"
        f"{message.text}"
    )

    await bot.send_message(-1001902595324, message_thread_id=348, text=text_from_user)

    await messages.delete()
    await message.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ ‚úÖ\n–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å üïê")
