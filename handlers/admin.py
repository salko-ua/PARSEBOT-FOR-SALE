import asyncio

from aiogram import types, F, Router
from aiogram.filters import Command
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from config import ADMINS
from control_db import Database
from keyboards.admin import admin_kb, send_alarm
from keyboards.menu import hide_kb
from main import bot
from datetime import datetime

router = Router()


class SendNews(StatesGroup):
    send_message = State()
    send_message_finish = State()
    send_news_users = State()
    send_news_premium = State()


@router.message(F.text == "db")
async def send_file_db(message: Message):
    if not (message.from_user.id in ADMINS):
        return

    file_path = types.FSInputFile("data/database.db")
    await bot.send_document(message.from_user.id, file_path)


@router.message(Command("admin"))
async def admin(message: Message):
    if message.from_user.id in ADMINS:
        await message.delete()
        await message.answer("–û—Å—å –≤–∞—à–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ ‚¨áÔ∏è", reply_markup=admin_kb())


@router.message(F.text == "–õ—é–¥–∏ üë•")
async def people_ex(message: Message):
    if not message.from_user.id in ADMINS:
        return

    db = await Database.setup()
    all_users = await db.get_all_user()
    premium_users = await db.get_all_premium_telegram_id()

    new = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —è–∫—ñ –Ω—ñ —Ä–∞–∑—É –Ω–µ –∫—É–ø—É–≤–∞–ª–∏ –ø—Ä–µ–º—ñ—É–º:"

    for telegram_id, username, date_join in all_users[0]:
        if telegram_id not in premium_users[0]:
            data = datetime.strptime(date_join, "%d.%m.%Y %H:%M")
            formatted_date = data.strftime("%d.%m.%Y %H:%M")
            new += f"\n–Ü–º`—è: @{username}\nID: {telegram_id}\n–î–∞—Ç–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è{formatted_date}"

    await message.answer()


@router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
async def stats(message: Message):
    await message.delete()
    if not message.from_user.id in ADMINS:
        return

    db = await Database.setup()
    operations = await db.get_stats_from_operation()
    operation_1day = await db.get_stats_from_operation(1)
    operation_7days = await db.get_stats_from_operation(7)
    operation_30days = await db.get_stats_from_operation(30)

    stats_all_time = {"count": operations[0], "sum": operations[1]}
    stats_1day = {"count": operation_1day[0], "sum": operation_1day[1]}
    stats_7day = {"count": operation_7days[0], "sum": operation_7days[1]}
    stats_30day = {"count": operation_30days[0], "sum": operation_30days[1]}
    zero = "0"

    generated_message = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç—É üìä:\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫-—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {await db.get_count_users()}\n"
        f"–ö-—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –∞–∫—Ç–∏–≤–Ω–æ—é –ø—ñ–¥–ø–∏—Å–∫–æ—é: {await db.get_count_premium_user(1)}\n"
        f"–ö-—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—ñ –Ω–µ –ø—Ä–æ–¥–æ–≤–∂–∏–ª–∏ –ø—ñ–¥–ø–∏—Å–∫—É: {await db.get_count_premium_user(0)}\n"
        f"–ö-—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—ñ —Ö–æ—á —Ä–∞–∑ –∫—É–ø—É–≤–∞–ª–∏ –ø—ñ–¥–ø–∏—Å–∫—É: {await db.get_count_premium_user(1) + await db.get_count_premium_user(0)}\n\n"
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ—Ö–æ–¥—É üìä:\n"
        f"–î–µ–Ω—å:\n"
        f"–ö-—Ç—å –ø–æ–∫—É–ø–æ–∫ - {stats_1day['count']}\n"
        f"–ó–∞—Ä–æ–±–ª–µ–Ω–æ –≥—Ä–æ—à–µ–π - {stats_1day['sum'] if stats_1day['sum'] else zero}\n\n"
        f"–¢–∏–∂–¥–µ–Ω—å:\n"
        f"–ö-—Ç—å –ø–æ–∫—É–ø–æ–∫ - {stats_7day['count']}\n"
        f"–ó–∞—Ä–æ–±–ª–µ–Ω–æ –≥—Ä–æ—à–µ–π - {stats_7day['sum'] if stats_7day['sum'] else zero}\n\n"
        f"–ú—ñ—Å—è—Ü—å:\n"
        f"–ö-—Ç—å –ø–æ–∫—É–ø–æ–∫ - {stats_30day['count']}\n"
        f"–ó–∞—Ä–æ–±–ª–µ–Ω–æ –≥—Ä–æ—à–µ–π - {stats_30day['sum'] if stats_30day['sum'] else zero}\n\n"
        f"–ó–∞ –≤–µ—Å—å —á–∞—Å:\n"
        f"–ö-—Ç—å –ø–æ–∫—É–ø–æ–∫ - {stats_all_time['count']}\n"
        f"–ó–∞—Ä–æ–±–ª–µ–Ω–æ –≥—Ä–æ—à–µ–π - {stats_all_time['sum'] if stats_all_time['sum'] else zero}\n\n"
    )

    await message.answer(text=generated_message, reply_markup=hide_kb())


@router.message(F.text == "–†–æ–∑—Å–∏–ª–∫–∞ üì¢")
async def alarm(message: Message):
    if not message.from_user.id in ADMINS:
        return

    text = "–ö–æ–º—É –Ω–∞–ø–∏—Å–∞—Ç–∏? ü§î\n–û—Å–æ–±–∏—Å—Ç–æ üë§\n–í—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–ºüë•\n–ü—Ä–µ–º—ñ—É–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–ºüëë"
    await message.delete()
    await message.answer(text, reply_markup=send_alarm())


@router.callback_query(F.data == "–í—Å—ñ–º üë•")
async def send_alarm_all(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    await query.message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ")
    await state.set_state(SendNews.send_news_users)


@router.callback_query(F.data == "–û—Å–æ–±–∏—Å—Ç–æ üë§")
async def send_alarm_single(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    await query.message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ")
    await state.set_state(SendNews.send_message)


@router.message(SendNews.send_message, F.text)
async def send_message_single(message: Message, state: FSMContext):
    await state.set_state(SendNews.send_message_finish)
    await state.update_data(message=message.text)
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å telegram_id: ")


@router.message(SendNews.send_message_finish, F.text)
async def send_mixed_news2(message: Message, state: FSMContext):
    data = await state.get_data()
    message_text = data["message"]
    await state.clear()
    try:
        await bot.send_message(
            chat_id=message.text, text=f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞ –Ω–∞–ø–∏—Å–∞–≤: \n{message_text}"
        )
        await message.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–Ω–æ")
    except:
        await message.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")


@router.callback_query(F.data == "–ü—Ä–µ–º—ñ—É–º üëë")
async def send_alarm_premium(query: CallbackQuery, state: FSMContext):
    await query.message.delete()
    await query.message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ")
    await state.set_state(SendNews.send_news_premium)


@router.message(SendNews.send_news_premium, F.text)
async def send_mixed_news2(message: Message, state: FSMContext):
    db = await Database.setup()
    await state.clear()

    premium_user_ids = map(lambda e: e[0], await db.get_all_premium_telegram_id())

    if not premium_user_ids:
        await message.answer("–ù–µ–º–∞—î –ª—é–¥–µ–π –∑ –ø—ñ–¥–ø–∏—Å–∫–æ—é")
        return

    await asyncio.gather(*map(send_notification(message.text), premium_user_ids))

    await message.answer("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–µ–Ω–æ!")


@router.message(SendNews.send_news_users, F.text)
async def send_mixed_news2(message: Message, state: FSMContext):
    db = await Database.setup()
    await state.clear()

    user_ids = map(lambda e: e[0], await db.get_all_user_telegram_id())

    if not user_ids:
        await message.answer("—É –±–æ—Ç—ñ –Ω–µ–º–∞—î –ª—é–¥–µ–π")
        return

    await asyncio.gather(*map(send_notification(message.text), user_ids))

    await message.answer("–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–µ–Ω–æ!")


def send_notification(text: str):
    async def wrapped(user_id: int):
        try:
            await bot.send_message(user_id, text)
        except:
            pass

    return wrapped
